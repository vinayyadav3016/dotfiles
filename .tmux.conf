##############################
#  _
# | |_ _ __ ___  _   ___  __
# | __| '_ ` _ \| | | \ \/ /
# | |_| | | | | | |_| |>  < 
#  \__|_| |_| |_|\__,_/_/\_\
#
#############################
 
############################################################################
############################################################################
# Reset Prefix
############################################################################
#set -g prefix C-a
#bind-key a send-prefix # for nested tmux sessions
 
############################################################################
# Global options
############################################################################
# large history
set-option -g history-limit 10000
 
# colors
setw -g mode-bg black
set-option -g default-terminal "screen-256color" #"xterm-256color" # "screen-256color"
set-option -g pane-active-border-fg green
 
# utf8 support
#set-window-option -g utf8 on
set-option -ga terminal-overrides ',*:enacs@:smacs@:rmacs@:acsc@' 
 
# basic settings
#set-window-option -g xterm-keys on # for vim
#set-window-option -g mode-keys vi # vi key
set-window-option -g monitor-activity on
set-window-option -g window-status-current-fg white
setw -g window-status-current-attr reverse
 
# Automatically set window title
setw -g automatic-rename
 
# use mouse # More on mouse support http://floriancrouzat.net/2010/07/run-tmux-with-mouse-support-in-mac-os-x-terminal-app/
#setw -g mode-mouse on
#setw -g mouse-resize-pane on
#set -g mouse-select-window on
#set -g mouse-select-pane on
#set -g terminal-overrides 'xterm*:smcup@:rmcup@'
 
# vi movement keys
#set-option -g status-keys vi
set-window-option -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Start windows and panes at 1, not 0
set -g base-index 1
set -g pane-base-index 1 

############################################################################
# Status Bar
############################################################################
#set-option -g status-utf8 on
set-option -g status-justify centre
set-option -g status-bg cyan # colour213 # pink
set-option -g status-fg red
set-option -g status-interval 5
set-option -g status-left-length 30
#set -g status-left "#[fg=green,bold]: #h : #[fg=brightblue]#(curl icanhazip.com) #[fg=yellow]#(ifconfig en0 | grep 'inet ' | awk '{print \"en0 \" $2}') #(ifconfig en1 | grep 'inet ' | awk '{print \"en1 \" $2}') #[fg=red]#(ifconfig tun0 | grep 'inet ' | awk '{print \"vpn \" $2}') "
set-option -g status-left ' #[fg=black,bold]#(whoami)@#(hostname -s)'
set-option -g status-right "#[fg=black,bold]#S #I:#P #[fg=yellow,bold]/#[fg=black,bold]%d%b%Y#[fg=yellow,bold]/#[fg=black,bold]%l:%M%p#[fg=yellow,bold]/#[fg=black,bold]UTC-#(date -u | awk '{print $4}')"
#set-option -g status-right '#[fg=red,bold][[ #(git branch) branch ]] #[fg=cyan] #[fg=blue,bold]###S #[fg=magenta]%R %m-%d#(acpi | cut -d ',' -f 2)#[default]'
set-option -g visual-activity on
setw -g monitor-activity on

# Titles (window number, program name, active (or not)
set-option -g set-titles on
set-option -g set-titles-string '#H:#S.#I.#P #W #T'
 
 
############################################################################
# Unbindings
############################################################################
#unbind [ # copy mode bound to escape key
#unbind j
#unbind C-b # unbind default leader key
#unbind '"' # unbind horizontal split
#unbind %   # unbind vertical split
 
 
############################################################################
# Bindings
############################################################################
# reload tmux conf
#bind-key r source-file ~/.tmux.conf
 
#bind Escape copy-mode
 
# new split in current pane (horizontal / vertical)
#bind-key - split-window -v # split pane horizontally
#bind-key \ split-window -h # split pane vertically
 
# list panes
bind-key Space list-panes
 
# break-pane
#bind-key Enter break-pane
 
# join-pane [-dhv] [-l size | -p percentage] [-s src-pane]
# [-t:dst-window.dst-pane] (destination window (dot) destination pane
#                (alias: joinp)
#
#bind C-j command-prompt "joinp"
#bind C-j command-prompt "join-pane"
#bind-key j command-prompt "join-pane -s '%%'"
#bind-key j command-prompt "joinp -t:0"
#bind-key Space command-prompt "joinp -t:%%" # %% = prompt for window.pane [-V|H] # vert|hor split
 
#previous pane
#bind-key -n C-up prev
#bind-key -n C-left prev
 
#next pane
#bind-key -n C-right next
#bind-key -n C-down next
 
############################################################################
# windows
############################################################################
set-window-option -g window-status-current-bg red
#bind C-j previous-window
#bind C-k next-window
#bind-key C-a last-window # C-a C-a for last active window
#bind A command-prompt "rename-window %%"
# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
#setw -g aggressive-resize on
 
############################################################################
# panes
############################################################################
# Navigation ---------------------------------------------------------------
# use the vim motion keys to move between panes
#bind-key h select-pane -L
#bind-key j select-pane -D
#bind-key k select-pane -U
#bind-key l select-pane -R
 
# Resizing ---------------------------------------------------------------
#bind-key C-h resize-pane -L
#bind-key C-j resize-pane -D
#bind-key C-k resize-pane -U
#bind-key C-l resize-pane -R
#Shift + arrows to resize pane
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

 
# use vim motion keys while in copy mode
#setw -g mode-keys vi
 
############################################################################
# layouts
############################################################################
#bind o select-layout "active-only"
#bind M-- select-layout "even-vertical"
#bind M-| select-layout "even-horizontal"
#bind M-r rotate-window
 
 
# focus on first window
# select-window -t 0

# smart pane switching with awareness of vim splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

#vi style selection and copying to clipboard
#bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

#copy paste to clipboard
#set-option -g default-command "reattach-to-user-namespace -l zsh" # or bash...
set-option -g default-command "zsh"
#bind C-c run "tmux save-buffer - | reattach-to-user-namespace pbcopy"
#bind C-v run "reattach-to-user-namespace pbpaste | tmux load-buffer - && tmux paste-buffer"

bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

bind-key h split-window -v -c '#{pane_current_path}'
bind-key v split-window -h -c '#{pane_current_path}'

bind-key c new-window -c '#{pane_current_path}'
bind-key k confirm kill-window

# Quickly edit todo list
bind-key t split-window -h "vim"

bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# Tmux will auto-start on system boot
#set -g @continuum-boot 'on'
#set -g @continuum-boot-options 'iterm'
#set -g @continuum-restore 'on'
#set -g @continuum-save-interval '5'
#set -g @resurrect-strategy-vim 'session'
#set -g @resurrect-strategy-nvim 'session' #for Neo Vim

# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tpm-sensible'
set -g @plugin 'jimeh/tmux-themepack'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'

### Theme
set -g @themepack 'powerline/double/cyan'

#### Initialize tmp
run '~/.tmux/plugins/tpm/tpm'

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=10000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$'
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

TaskIndicator() {
    URGENT=⚠
    DUETOMORROW=⊠
    DUETODAY=⚡
    OVERDUE=⏻
    TASK=task
    #if [[ `$TASK +READY +OVERDUE count` -gt "0" ]]; then
    #    echo "$OVERDUE"
    #elif [[ `$TASK +READY +DUETODAY count` -gt "0" ]]; then
    #    echo "$DUETODAY"
    #elif [[ `$TASK +READY +TOMORROW count` -gt "0" ]]; then
    #    echo "$DUETOMORROW"
    #if [[ `$TASK +READY 'urgency > 10' count` -gt "0" ]]; then
        #echo "$URGENT"
    #else
        #echo '$'
    #fi
}

### change prompt '${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
PS1="\[\e[0;31m\]=====================================\[\e[m\]\n\[\e[0;32m\]\u@\H\[\e[m\]:[\l]:[\j]:\[\e[0;31m\]\w/\[\e[m\]\n[\[\e[1;34m\]\t\[\e[m\]-\[\e[1;31m\]\#\[\e[m\]]:[\$(TaskIndicator)]:\[\e[1;31m\]\$\[\e[m\] "
#PS1="\[\e[0;31m\]=====================================\[\e[m\]\n\[\e[0;32m\]\u@\H\[\e[m\]:[\l]:[\j]:\[\e[0;31m\]\w/\[\e[m\]\n[\[\e[1;34m\]\t\[\e[m\]-\[\e[1;31m\]\#\[\e[m\]]\[\e[1;31m\]\$\[\e[m\] "

export EDITOR=vim
set -o vi

if [ -f ~/.config/bash/bashrc.local ]; then
    . ~/.config/bash/bashrc.local
fi

if [ -f ~/.config/broot/launcher/bash/br ]; then
    . ~/.config/broot/launcher/bash/br
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.config/bash/bash_aliases ]; then
    . ~/.config/bash/bash_aliases
fi

eval $(keychain --eval -q) > /dev/null 2>/dev/null
eval "$(zoxide init bash)"

# AGENT=`pgrep -u $USER ssh-agent`
# if [[ ! -n "$AGENT" ]]; then
    # ssh-agent -s> "$XDG_RUNTIME_DIR/ssh-agent.env"
    # cat $XDG_RUNTIME_DIR/ssh-agent.env
    # ssh-add
# fi
# if [[ ! -f "$SSH_AUTH_SOCK" ]]; then
    # source "$XDG_RUNTIME_DIR/ssh-agent.env" >/dev/null
    # #eval "ssh-agent -s" > /dev/null
# fi
